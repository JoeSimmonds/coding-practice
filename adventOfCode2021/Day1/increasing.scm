(define (count-increases items)
  (define (inner-rec previous remaining-items current-count)
    (if (= (length remaining-items) 0)
      current-count
      (if (< previous (car remaining-items))
        (inner-rec (car remaining-items) (cdr remaining-items) (+ current-count 1))
        (inner-rec (car remaining-items) (cdr remaining-items) current-count)
      )
    )
  )
  (if (= (length items) 0)
    0
    (inner-rec (car items) items 0) 
  )
)

(define (read-lines-from-port port)
  (let ((line (read-line port)))
    (if (eof-object? line) 
      (list)
      (cons line (read-lines-from-port port))
    )
  )
)

(define main
  (lambda ()
    (newline)
    (display "Starting")
    (newline)
    (let* (
        (port (open-input-file "input.txt"))
        (lines (read-lines-from-port port))
        (nums (map string->number lines))
      )
      (close-port port)
      (display (count-increases nums))
    )
    (newline)
  )    
)

(define test
  (lambda ()
    (newline)
    (load "libs/scmUnit/scmUnit.scm")
    (load "tests.scm")
    (display "running tests...")
    (run-tests)
    (print-results)
    (newline)
  )
)